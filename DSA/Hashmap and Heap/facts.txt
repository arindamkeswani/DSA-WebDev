Syntax:
HashMap <String, Integer> hm = new HashMap<>();


put function: will either create a value(if it does not exist), will update an existing value
hm.put("India", 200);    //India is key, 200 is value
hm.get("India"); //200
hm.get("Iraq"); //null
hm.containsKey("India"); //true

hashmap is unordered

to print values, Sopln(hm)
to print particular value, Sopln(hm.get(key))

for(String keys: hm.keySet()){ //this keyset canot be converted in to array list
    System.out.print(keys + " " );
}

remove and size functions are also present
containsKey(key) //check whether key is present and return boolean value

////////////////////////////////SAMPLE CODE///////////////////////////////
import java.util.HashMap;
import java.util.ArrayList;
public class Main{
    public static void main(String args[]){
        HashMap<String,Integer> hm = new HashMap<>();
        
        hm.put("India",200);
        hm.put("UK",180);
        hm.put("USA",190);
        hm.put("China",170);
        hm.put("Utopia",150);
        
        ArrayList<String> list = new ArrayList<>(hm.keySet());
        // System.out.println(list);
        // System.out.println(hm);
        for(String keys : hm.keySet()){
            System.out.print(keys+"-->"+hm.get(keys)+"  ");
        }
        // hm.remove("China");
        // System.out.println(hm);
        // System.out.println(hm.containsKey("india"));
        // System.out.println(hm.get("UK"));
        
    }
}
//////////////////
Hash Function takes a key as input and returns the bucket index of the most probable location
Hash Function basically cuts down the search area
Lambda=Number of elements/number of buckets (Average number of elements per bucket)

Re-hashing doubles the number of buckets to accomodate more values without increasing density of elements in a bucket(and lambda)
Re-hashing will always keep the value of lambda <=2
All "dynamic" data structures use this property
//////////////////
Interface: Empty structure/Contract of functions
If class calls upon an interfacr, it has to provide the body for the Interface
//////////////////
downHeapify is better than upHeapify
downHeapify does more work on less number of elements O(n logn) (down the chain)
upHeapify does more work on more number of elements O(n) (up the chain)

